# ==============================================
# 【战略型杜邦分析计算器】v1.0
# 独特性：驱动因素雷达图（文字版）+ 战略类型判断 + 行业标杆对比
# 开发者：Kiwi_hazel
# 公式来源：CFA二级教材P189（杜邦三分解：ROE = 净利率 × 资产周转率 × 权益乘数）
# ==============================================

def analyze_dupont(net_profit, revenue, avg_assets, avg_equity, industry):
    """
    核心功能：计算ROE三因素并输出战略解读
    :param industry: 行业类型（科技业/零售业/制造业）
    """
    # 基础校验（财务数据必须为正）
    if net_profit <= 0 or revenue <= 0 or avg_assets <= 0 or avg_equity <= 0:
        return {"error": "⚠️ 输入错误：净利润、营收、资产、权益需>0（财务数据逻辑校验）"}
    
    # 计算三因素（保留2位小数）
    净利率 = round((net_profit / revenue) * 100, 2)  # %
    资产周转率 = round(revenue / avg_assets, 2)       # 次/年
    权益乘数 = round(avg_assets / avg_equity, 2)      # 倍
    ROE = round(净利率 * 资产周转率 * 权益乘数 / 100, 2)  # 合成ROE
    
    # ----------------------
    # 点1：驱动因素雷达图（文字版）
    # ----------------------
    行业基准 = {
        "科技业": {"净利率": 15.0, "资产周转率": 1.2, "权益乘数": 1.5},  # 高利润低周转
        "零售业": {"净利率": 3.0, "资产周转率": 3.0, "权益乘数": 2.0},   # 低利润高周转
        "制造业": {"净利率": 8.0, "资产周转率": 1.8, "权益乘数": 2.5}    # 均衡型
    }
    基准 = 行业基准.get(industry, 行业基准["制造业"])  # 默认制造业
    
    # 用箭头表示与行业基准的差异（↑高于 ↓低于 → 持平）
    净利率趋势 = "↑" if 净利率 > 基准["净利率"] * 1.1 else "↓" if 净利率 < 基准["净利率"] * 0.9 else "→"
    周转率趋势 = "↑" if 资产周转率 > 基准["资产周转率"] * 1.1 else "↓" if 资产周转率 < 基准["资产周转率"] * 0.9 else "→"
    杠杆趋势 = "↑" if 权益乘数 > 基准["权益乘数"] * 1.1 else "↓" if 权益乘数 < 基准["权益乘数"] * 0.9 else "→"
    
    # ----------------------
    # 点2：战略类型判断
    # ----------------------
    if 净利率 > 行业基准[industry]["净利率"] * 1.5:
        战略类型 = "【高利润型】"  # 如奢侈品、科技公司
        战略解读 = "优势：品牌溢价高，抗周期能力强；风险：需持续投入研发/营销维持溢价"
    elif 资产周转率 > 行业基准[industry]["资产周转率"] * 1.5:
        战略类型 = "【高周转型】"  # 如零售、快消品
        战略解读 = "优势：轻资产运营，现金流健康；风险：依赖供应链效率，易受价格战影响"
    elif 权益乘数 > 行业基准[industry]["权益乘数"] * 1.5:
        战略类型 = "【高杠杆型】"  # 如金融、房地产
        战略解读 = "优势：放大ROE，适合低风险稳定行业；风险：利率上升或资产贬值时压力大"
    else:
        战略类型 = "【均衡型】"
        战略解读 = "优势：三因素协同发展；风险：需警惕各因素无亮点导致ROE平庸"
    
    return {
        "roe": ROE,
        "factors": {"净利率(%)": 净利率, "资产周转率(次)": 资产周转率, "权益乘数(倍)": 权益乘数},
        "radar": f"驱动因素趋势：净利率{净利率趋势} 周转率{周转率趋势} 杠杆{杠杆趋势}",
        "strategy_type": 战略类型,
        "strategy_note": 战略解读,
        "industry": industry
    }

# ----------------------
# 极简交互（3步输入+卡片输出）
# ----------------------
if __name__ == "__main__":
    print("\n===== 📊 战略型杜邦分析计算器 =====")
    print("→ 独特功能：不仅算ROE，还揭示驱动因素和战略类型\n")
    
    # 3步核心输入（带行业特性提示）
    net_profit = float(input("1. 净利润（万元，例：1200 → 科技业建议>营收15%）："))
    revenue = float(input("2. 营业收入（万元，例：8000 → 零售业建议>资产3倍）："))
    avg_assets = float(input("3. 平均总资产（万元，例：5000 → 制造业建议周转率>1.5次）："))
    avg_equity = float(input("4. 平均净资产（万元，例：3000）："))
    industry = input("\n5. 行业类型（输入数字1-3）：1.科技业 2.零售业 3.制造业 → ")
    industry_map = {"1": "科技业", "2": "零售业", "3": "制造业"}
    industry_name = industry_map.get(industry, "制造业")
    
    # 计算+输出（卡片式结果）
    result = analyze_dupont(net_profit, revenue, avg_assets, avg_equity, industry_name)
    print(f"\n{'='*50}")
    if "error" in result:
        print(result["error"])
    else:
        print(f"ROE（净资产收益率）：{result['roe']}%")
        print(f"三因素分解：{result['factors']}")
        print(f"行业对比：{result['radar']}（↑高于行业10%，↓低于行业10%，→ 持平）\n")
        print(f"🎯 战略类型：{result['strategy_type']}")
        print(f"💡 战略解读：{result['strategy_note']}")
    print(f"\n📚 关键逻辑：ROE=净利率×资产周转率×权益乘数 → 高ROE需至少1个因素突出")
    print("="*50)
 
